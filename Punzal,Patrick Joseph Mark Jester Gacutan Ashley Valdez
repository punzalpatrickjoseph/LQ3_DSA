// Bus data structure
const buses = [
  { name: "Cuba", destination: "Havana", seats: Array(30).fill(null) },
  { name: "Baguio", destination: "Baguio City", seats: Array(30).fill(null) },
  { name: "Pasay", destination: "Manila", seats: Array(30).fill(null) },
];

// User authentication (simplified)
function authenticate(username, password) {
  return username === "admin" && password === "password";
}

// Display buses and their available seats
function displayBuses() {
  buses.forEach((bus, index) => {
    console.log(`Bus ${index + 1}: ${bus.name} to ${bus.destination}`);
    bus.seats.forEach((seat, seatIndex) => {
      console.log(`Seat ${seatIndex + 1}: ${seat ? seat : "Available"}`);
    });
    console.log("\n");
  });
}

// Manage reservations (add or remove)
function manageReservations(busIndex, addOrRemove, seatIndex, customerName) {
  if (addOrRemove === "add") {
    if (buses[busIndex].seats[seatIndex] === null) {
      buses[busIndex].seats[seatIndex] = customerName;
      console.log("Reservation added successfully!");
    } else {
      console.log("Seat already booked.");
    }
  } else if (addOrRemove === "remove") {
    if (buses[busIndex].seats[seatIndex] === customerName) {
      buses[busIndex].seats[seatIndex] = null;
      console.log("Reservation cancelled successfully!");
    } else {
      console.log("Customer not found in this seat.");
    }
  }
}

// Customer reservation
function customerReserve(busIndex, seatIndex, customerName) {
  if (buses[busIndex].seats[seatIndex] === null) {
    buses[busIndex].seats[seatIndex] = customerName;
    console.log("Reservation successful!");
  } else {
    console.log("Seat already booked. Please choose another seat.");
  }
}

// Customer cancellation
function customerCancel(busIndex, seatIndex, customerName) {
  if (buses[busIndex].seats[seatIndex] === customerName) {
    buses[busIndex].seats[seatIndex] = null;
    console.log("Cancellation successful!");
  } else {
    console.log("No reservation found under that name for this seat.");
  }
}

// Simple bubble sort (for demonstration; not optimized)
function sortReservations(bus) {
    let swapped;
    do {
        swapped = false;
        for (let i = 0; i < bus.seats.length - 1; i++) {
            if (bus.seats[i] !== null && bus.seats[i+1] !== null && bus.seats[i] > bus.seats[i+1]) {
                // Swap elements
                [bus.seats[i], bus.seats[i+1]] = [bus.seats[i+1], bus.seats[i]];
                swapped = true;
            }
        }
    } while (swapped);
}


// Main program loop
function main() {
  let userType;
  do {
    userType = prompt("Are you a TICKET PERSON or CUSTOMER?");
  } while (userType !== "TICKET PERSON" && userType !== "CUSTOMER");

  if (userType === "TICKET PERSON") {
    let username, password;
    do {
      username = prompt("Enter username:");
      password = prompt("Enter password:");
    } while (!authenticate(username, password));

    let choice;
    do {
      choice = prompt("Choose an action: LOGOUT, VIEW, MANAGE");
      switch (choice) {
        case "VIEW":
          displayBuses();
          break;
        case "MANAGE":
          const busIndex = parseInt(prompt("Enter bus number (1-3):")) - 1;
          const addOrRemove = prompt("Add or remove reservation? (add/remove)");
          const seatIndex = parseInt(prompt("Enter seat number (1-30):")) - 1;
          const customerName = prompt("Enter customer name:");
          manageReservations(busIndex, addOrRemove, seatIndex, customerName);
          break;
      }
    } while (choice !== "LOGOUT");
  } else { // CUSTOMER
    displayBuses();
    let busChoice, seatChoice, customerName;
    do {
      busChoice = parseInt(prompt("Enter bus number (1-3) to reserve/cancel:")) - 1;
      if(busChoice >=0 && busChoice < buses.length){
        seatChoice = parseInt(prompt("Enter seat number (1-30):")) -1;
        if(seatChoice >= 0 && seatChoice < buses[busChoice].seats.length){
            customerName = prompt("Enter your name:");
            let action = prompt("Reserve or cancel? (reserve/cancel)");
            if (action === "reserve") {
              customerReserve(busChoice, seatChoice, customerName);
            } else if (action === "cancel") {
              customerCancel(busChoice, seatChoice, customerName);
            } else {
              console.log("Invalid action.");
            }
        } else {
            console.log("Invalid seat number.");
        }
      } else {
          console.log("Invalid bus number.");
      }

    } while (confirm("Do you want to continue?"));

    //Example of sorting after customer actions.  This should be integrated more smoothly.
    buses.forEach(bus => sortReservations(bus));
    displayBuses();

  }
}

main();
